{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://apgms.example.com/schemas/redteam.case.schema.json",
  "title": "Adversarial Case File",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "id",
    "version",
    "kind",
    "expected_outcome",
    "checks"
  ],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^[A-Za-z0-9_.-]+$",
      "description": "Stable identifier for the case."
    },
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",
      "description": "Semantic version for the case definition."
    },
    "title": {
      "type": "string",
      "minLength": 1,
      "description": "Human-friendly name for the case."
    },
    "description": {
      "type": "string",
      "minLength": 1,
      "description": "Narrative description of the adversarial scenario."
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string",
        "minLength": 1
      },
      "uniqueItems": true,
      "description": "Optional classification tags."
    },
    "kind": {
      "type": "string",
      "enum": [
        "llm",
        "api"
      ],
      "description": "Execution surface targeted by the case."
    },
    "expected_outcome": {
      "type": "string",
      "enum": [
        "refuse",
        "error",
        "allowed"
      ],
      "description": "Outcome the runner should observe when the case is successful."
    },
    "checks": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/check"
      },
      "description": "Assertions that validate runner output."
    },
    "llm": {
      "$ref": "#/$defs/llmCase"
    },
    "api": {
      "$ref": "#/$defs/apiCase"
    },
    "metadata": {
      "type": "object",
      "additionalProperties": true,
      "description": "Arbitrary producer metadata."
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "kind": {
            "const": "llm"
          }
        }
      },
      "then": {
        "required": [
          "llm"
        ],
        "properties": {
          "api": false
        }
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "api"
          }
        }
      },
      "then": {
        "required": [
          "api"
        ],
        "properties": {
          "llm": false
        }
      }
    }
  ],
  "$defs": {
    "message": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "role",
        "content"
      ],
      "properties": {
        "role": {
          "type": "string",
          "enum": [
            "system",
            "user",
            "assistant"
          ]
        },
        "content": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "check": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[A-Za-z0-9_.-]+$"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "must_include",
            "must_not_include",
            "status"
          ]
        },
        "value": {
          "type": "string",
          "minLength": 1
        },
        "case_sensitive": {
          "type": "boolean",
          "default": false
        },
        "operator": {
          "type": "string",
          "enum": [
            ">=",
            "=="
          ]
        },
        "status_code": {
          "type": "integer",
          "minimum": 100,
          "maximum": 599
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "status"
              }
            }
          },
          "then": {
            "required": [
              "operator",
              "status_code"
            ],
            "properties": {
              "value": false,
              "case_sensitive": false
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "enum": [
                  "must_include",
                  "must_not_include"
                ]
              }
            }
          },
          "then": {
            "required": [
              "value"
            ],
            "properties": {
              "operator": false,
              "status_code": false
            }
          }
        }
      ]
    },
    "llmCase": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "prompt"
      ],
      "properties": {
        "system": {
          "type": "string"
        },
        "prompt": {
          "type": "string",
          "minLength": 1
        },
        "conversation": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/message"
          }
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "type": [
              "string",
              "number",
              "boolean"
            ]
          }
        }
      }
    },
    "apiCase": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "request"
      ],
      "properties": {
        "request": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "method",
            "url"
          ],
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "GET",
                "POST",
                "PUT",
                "PATCH",
                "DELETE",
                "OPTIONS",
                "HEAD"
              ]
            },
            "url": {
              "type": "string",
              "format": "uri"
            },
            "headers": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "query": {
              "type": "object",
              "additionalProperties": {
                "type": [
                  "string",
                  "number",
                  "boolean"
                ]
              }
            },
            "body": {
              "type": [
                "string",
                "object",
                "array",
                "null"
              ]
            },
            "timeout_ms": {
              "type": "integer",
              "minimum": 0
            }
          }
        },
        "auth": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "scheme": {
              "type": "string"
            },
            "credentials": {
              "type": "string"
            }
          }
        },
        "preconditions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}
