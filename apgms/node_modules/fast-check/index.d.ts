interface Arbitrary<T> {
  generate(rng: any): T;
}

declare const fc: {
  integer(options?: { min?: number; max?: number }): Arbitrary<number>;
  boolean(): Arbitrary<boolean>;
  constantFrom<T>(...values: T[]): Arbitrary<T>;
  array<T>(arb: Arbitrary<T>, options?: { minLength?: number; maxLength?: number }): Arbitrary<T[]>;
  option<T>(arb: Arbitrary<T>, options?: { nil?: T }): Arbitrary<T | undefined>;
  record<T extends Record<string, Arbitrary<any>>>(template: T): Arbitrary<{ [K in keyof T]: ReturnType<T[K]["generate"]>; }>;
  string(options?: { minLength?: number; maxLength?: number; charSet?: string }): Arbitrary<string>;
  property(...args: any[]): { run: (numRuns?: number) => void };
  assert(prop: { run: (numRuns?: number) => void }, options?: { numRuns?: number }): void;
};

export default fc;
