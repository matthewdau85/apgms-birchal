class RNG {
  constructor(seed = 123456789) {
    this.seed = seed >>> 0;
  }
  next() {
    this.seed = (1664525 * this.seed + 1013904223) >>> 0;
    return this.seed;
  }
  nextFloat() {
    return this.next() / 0xffffffff;
  }
}

class Arbitrary {
  constructor(generator) {
    this.generate = generator;
  }
  map(mapper) {
    return new Arbitrary((rng) => mapper(this.generate(rng)));
  }
}

function integer({ min = 0, max = Number.MAX_SAFE_INTEGER } = {}) {
  return new Arbitrary((rng) => {
    const value = Math.floor(rng.nextFloat() * (max - min + 1)) + min;
    return Math.max(min, Math.min(max, value));
  });
}

function boolean() {
  return new Arbitrary((rng) => rng.nextFloat() < 0.5);
}

function constantFrom(...values) {
  return new Arbitrary((rng) => {
    const index = Math.floor(rng.nextFloat() * values.length);
    return values[Math.max(0, Math.min(values.length - 1, index))];
  });
}

function array(arb, { minLength = 0, maxLength = minLength + 5 } = {}) {
  return new Arbitrary((rng) => {
    const length = Math.floor(rng.nextFloat() * (maxLength - minLength + 1)) + minLength;
    const result = [];
    for (let i = 0; i < length; i += 1) {
      result.push(arb.generate(rng));
    }
    return result;
  });
}

function option(arb, { nil = undefined } = {}) {
  return new Arbitrary((rng) => (rng.nextFloat() < 0.5 ? nil : arb.generate(rng)));
}

function record(template) {
  return new Arbitrary((rng) => {
    const result = {};
    for (const [key, arb] of Object.entries(template)) {
      result[key] = arb.generate(rng);
    }
    return result;
  });
}

function string({ minLength = 0, maxLength = minLength + 5, charSet = "abcdefghijklmnopqrstuvwxyz" } = {}) {
  const chars = charSet.split("");
  return new Arbitrary((rng) => {
    const length = Math.floor(rng.nextFloat() * (maxLength - minLength + 1)) + minLength;
    let result = "";
    for (let i = 0; i < length; i += 1) {
      const index = Math.floor(rng.nextFloat() * chars.length);
      result += chars[Math.max(0, Math.min(chars.length - 1, index))];
    }
    return result;
  });
}

function property(...args) {
  const arbitraries = args.slice(0, -1);
  const predicate = args[args.length - 1];
  return {
    run(numRuns = 100) {
      const rng = new RNG();
      for (let i = 0; i < numRuns; i += 1) {
        const values = arbitraries.map((arb) => arb.generate(rng));
        const result = predicate(...values);
        if (result === false) {
          throw new Error("Property failed");
        }
      }
    },
    arbitraries,
    predicate,
  };
}

function assert(prop, options = {}) {
  const numRuns = options.numRuns ?? 100;
  if (typeof prop.run === "function") {
    prop.run(numRuns);
  } else {
    throw new Error("Invalid property");
  }
}

const api = {
  integer,
  boolean,
  constantFrom,
  array,
  option,
  record,
  string,
  property,
  assert,
};

module.exports = { ...api, default: api };
