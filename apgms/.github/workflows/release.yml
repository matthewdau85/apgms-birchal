name: Release Images

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/apgms

jobs:
  build-and-publish:
    name: Build, scan, and publish ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: api-gateway
            context: apgms/services/api-gateway
            dockerfile: apgms/services/api-gateway/Dockerfile
          - service: tax-engine
            context: apgms/services/tax-engine
            dockerfile: apgms/services/tax-engine/Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute short SHA
        id: vars
        run: echo "short=${GITHUB_SHA::12}" >> $GITHUB_OUTPUT

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=raw,value=${{ steps.vars.outputs.short }}
            type=raw,value=${{ github.ref_name }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan image with Trivy
        id: trivy-scan
        uses: aquasecurity/trivy-action@0.21.2
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ steps.vars.outputs.short }}
          format: sarif
          output: trivy-${{ matrix.service }}.sarif
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          vuln-type: 'os,library'
          exit-code: '1'

      - name: Generate SBOM (CycloneDX)
        uses: aquasecurity/trivy-action@0.21.2
        with:
          command: sbom
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ steps.vars.outputs.short }}
          format: cyclonedx
          output: sbom-${{ matrix.service }}.xml

      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-security-artifacts
          path: |
            trivy-${{ matrix.service }}.sarif
            sbom-${{ matrix.service }}.xml
          retention-days: 14

      - name: Publish scan to security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.service }}.sarif

  create-release:
    name: Publish release notes
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract release notes
        id: notes
        run: |
          VERSION="${GITHUB_REF_NAME}"
          NOTES=$(awk -v ver="## ${VERSION}" 'BEGIN{found=0} $0==ver{found=1; next} /^## / && found{exit} found{print}' CHANGELOG.md)
          if [ -z "$NOTES" ]; then
            echo "No changelog section found for ${VERSION}" >&2
            exit 1
          fi
          echo "body<<'EOF'" >> "$GITHUB_OUTPUT"
          echo "$NOTES" >> "$GITHUB_OUTPUT"
          echo 'EOF' >> "$GITHUB_OUTPUT"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
