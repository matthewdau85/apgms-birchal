export type LabelValues = Record<string, string>;

export interface CounterConfiguration<T extends string> {
  name: string;
  help: string;
  labelNames?: T[];
}

export interface HistogramConfiguration<T extends string> {
  name: string;
  help: string;
  labelNames?: T[];
  buckets?: number[];
}

export class Counter<T extends string = string> {
  constructor(configuration: CounterConfiguration<T>);
  inc(labels: LabelValues, value?: number): void;
  inc(value?: number): void;
}

export class Histogram<T extends string = string> {
  constructor(configuration: HistogramConfiguration<T>);
  observe(labels: LabelValues, value: number): void;
  observe(value: number): void;
}

export interface MetricRecord {
  name: string;
  help: string;
  type: string;
  get(): string;
  reset(): void;
}

export interface Register {
  contentType: string;
  registerMetric<T extends MetricRecord>(metric: T): T;
  getSingleMetric<T extends MetricRecord>(name: string): T | undefined;
  metrics(): string;
  resetMetrics(): void;
  clear(): void;
}

export const register: Register;

export function collectDefaultMetrics(): void;
