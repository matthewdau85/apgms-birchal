import { createPrivateKey, createPublicKey, randomBytes, sign as nodeSign, verify as nodeVerify } from "node:crypto";

const PRIVATE_KEY_PREFIX = Buffer.from("302e020100300506032b657004220420", "hex");
const PUBLIC_KEY_PREFIX = Buffer.from("302a300506032b6570032100", "hex");

const toBuffer = (value) => (Buffer.isBuffer(value) ? value : Buffer.from(value));

const toPrivateKey = (secretKey) =>
  createPrivateKey({ key: Buffer.concat([PRIVATE_KEY_PREFIX, toBuffer(secretKey)]), format: "der", type: "pkcs8" });

const toPublicKey = (publicKey) =>
  createPublicKey({ key: Buffer.concat([PUBLIC_KEY_PREFIX, toBuffer(publicKey)]), format: "der", type: "spki" });

export const getPublicKey = async (secretKey) => {
  const privateKey = toPrivateKey(secretKey);
  const publicKey = createPublicKey(privateKey);
  const der = publicKey.export({ format: "der", type: "spki" });
  return new Uint8Array(der.slice(PUBLIC_KEY_PREFIX.length));
};

export const sign = async (message, secretKey) => {
  const signature = nodeSign(null, toBuffer(message), toPrivateKey(secretKey));
  return new Uint8Array(signature);
};

export const verify = async (signature, message, publicKey) =>
  nodeVerify(null, toBuffer(message), toPublicKey(publicKey), toBuffer(signature));

export const utils = {
  randomPrivateKey: () => new Uint8Array(randomBytes(32)),
};
