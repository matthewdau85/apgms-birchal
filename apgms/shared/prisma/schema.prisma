generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum TransferStatus {
  PENDING
  SUBMITTED
  SETTLED
  FAILED
}

enum TransferRail {
  BECS
  PAYTO
}

model Org {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
  lines     BankLine[]
  transfers Transfer[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
}

model BankLine {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  date      DateTime
  amount    Decimal
  payee     String
  desc      String
  createdAt DateTime @default(now())
}

model Transfer {
  id          String         @id @default(cuid())
  org         Org            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  requestId   String         @unique
  rail        TransferRail
  amount      Decimal
  currency    String
  status      TransferStatus @default(PENDING)
  externalId  String?
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  events      TransferEvent[]
}

model TransferEvent {
  id         String   @id @default(cuid())
  transfer   Transfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
  transferId String
  requestId  String   @unique
  kind       String
  payload    Json
  createdAt  DateTime @default(now())
}
