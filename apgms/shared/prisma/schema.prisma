generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Org {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
  lines     BankLine[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
}

model BankLine {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  date      DateTime
  amount    Decimal
  payee     String
  desc      String
  createdAt DateTime @default(now())
}

model AuditEvent {
  id           String   @id @default(cuid())
  actor        String
  action       String
  entityType   String?
  entityId     String?
  occurredAt   DateTime @default(now())
  metadata     Json?
  digestBefore String?
  digestAfter  String   @unique
}

model ManifestEntry {
  id         String   @id @default(cuid())
  orgId      String
  period     String
  sequence   Int
  payload    Json
  prevDigest String?
  digest     String   @unique
  createdAt  DateTime @default(now())
  rptTokens  RptToken[]

  @@unique([orgId, period, sequence])
}

model RptToken {
  id            String    @id @default(cuid())
  orgId         String
  period        String
  manifest      ManifestEntry @relation(fields: [manifestId], references: [id], onDelete: Restrict)
  manifestId    String
  token         String    @unique
  status        RptStatus @default(ACTIVE)
  mintedAt      DateTime  @default(now())
  mintedBy      String
  revokedAt     DateTime?
  revokedBy     String?
  revokedReason String?

  @@index([orgId, period])
}

enum RptStatus {
  ACTIVE
  REVOKED
}