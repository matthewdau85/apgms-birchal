generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Org {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
  lines     BankLine[]
  ledger    LedgerEntry[]
  rptTokens RptToken[]
  audits    AuditBlob[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
}

model BankLine {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  date      DateTime
  amount    Decimal
  payee     String
  desc      String
  createdAt DateTime @default(now())
}

model LedgerEntry {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  memo      String?
  amount    Decimal
  createdAt DateTime @default(now())
  rptTokens RptToken[]
}

model RptToken {
  id            String     @id @default(cuid())
  org           Org        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String
  ledgerEntry   LedgerEntry @relation(fields: [ledgerEntryId], references: [id], onDelete: Cascade)
  ledgerEntryId String
  payload       Json
  signature     String
  createdAt     DateTime   @default(now())
}

model AuditBlob {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  type      String
  payload   Json
  hash      String
  prevHash  String?
  prev      AuditBlob? @relation("AuditBlobPrev", fields: [prevId], references: [id])
  prevId    String?
  next      AuditBlob[] @relation("AuditBlobPrev")
  createdAt DateTime @default(now())
}
