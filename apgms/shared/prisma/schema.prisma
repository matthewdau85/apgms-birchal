generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Org {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
  lines     BankLine[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
}

model BankLine {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  date      DateTime
  amount    Decimal
  payee     String
  desc      String
  createdAt DateTime @default(now())
}

model IdempotencyKey {
  id           String   @id @default(cuid())
  key          String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  orgId        String
  method       String
  route        String
  responseCode Int
  responseBody Json
  createdAt    DateTime @default(now())

  @@unique([key, userId])
  @@index([orgId, createdAt])
}

model AuditEvent {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  orgId     String?
  action    String
  target    String?
  meta      Json
  ipAddress String?
  createdAt DateTime @default(now())

  @@index([orgId, createdAt])
  @@index([action, createdAt])
}