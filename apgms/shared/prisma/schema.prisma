generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Org {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
  lines     BankLine[]
  bankConnections BankConnection[]
  mandates        PayToMandate[]
  audits          AuditBlob[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
}

model BankLine {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  date      DateTime
  amount    Decimal
  payee     String
  desc      String
  createdAt DateTime @default(now())
}

model BankConnection {
  id          String         @id @default(cuid())
  org         Org            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  bank        String
  accountRef  String
  status      String         @db.VarChar(16)
  mandates    PayToMandate[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PayToMandate {
  id               String         @id @default(cuid())
  org              Org            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId            String
  bankConnection   BankConnection @relation(fields: [bankConnectionId], references: [id], onDelete: Cascade)
  bankConnectionId String
  reference        String
  status           String         @db.VarChar(16)
  amountLimitCents Int
  startAt          DateTime?
  endAt            DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model AuditBlob {
  id          String   @id @default(cuid())
  org         Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  subjectType String
  subjectId   String
  kind        String
  payload     Json
  createdAt   DateTime @default(now())
}