generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Org {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
  lines     BankLine[]
  ledgerEntries LedgerEntry[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
}

model BankLine {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String
  date      DateTime
  amount    Decimal
  payee     String
  desc      String
  createdAt DateTime @default(now())
  ledger    LedgerEntry?
  rptTokens RptToken[]
}

model LedgerEntry {
  id         String    @id @default(cuid())
  bankLine   BankLine  @relation(fields: [bankLineId], references: [id], onDelete: Cascade)
  bankLineId String    @unique
  org        Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId      String
  policyHash String
  allocation Json
  status     String    @default("finalized")
  metadata   Json?
  createdAt  DateTime  @default(now())
  rptTokens  RptToken[]
}

model RptToken {
  id            String      @id @default(cuid())
  ledgerEntry   LedgerEntry @relation(fields: [ledgerEntryId], references: [id], onDelete: Cascade)
  ledgerEntryId String      @unique
  bankLine      BankLine    @relation(fields: [bankLineId], references: [id], onDelete: Cascade)
  bankLineId    String
  policyHash    String
  allocation    Json
  payload       Json
  payloadHash   String
  hash          String      @unique
  prevHash      String?
  signature     String
  algorithm     String
  publicKey     String
  timestamp     DateTime
  createdAt     DateTime    @default(now())
}
